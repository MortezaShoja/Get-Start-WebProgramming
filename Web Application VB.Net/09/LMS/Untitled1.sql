CREATE PROC INS_Lesson @CID INT,@T VARCHAR(100),
@D INT AS
BEGIN
	DECLARE @LID INT
	IF EXISTS(SELECT * FROM Lessons
	WHERE CID=@CID)
	BEGIN
		SELECT @LID=MAX(LID)
		FROM Lessons
		WHERE CID=@CID
		SELECT @LID=@LID+1
	END
	ELSE
	BEGIN
		SELECT @LID=1
	END
	
	INSERT INTO Lessons(CID,LID,Title,Duration)
	VALUES(@CID,@LID,@T,@D)
END

EXEC INS_Lesson 3 ,'Variables',30
EXEC INS_Lesson 3,'Environment',20

CREATE PROC INS_Course @T  VARCHAR(100) AS
	INSERT INTO Courses(Title)
	VALUES(@T)


CREATE TRIGGER tg_INS_Lesson ON Lessons FOR INSERT AS
BEGIN
	DECLARE @D INT
	SELECT @D= duration
	FROM INSERTED

	UPDATE Courses
	SET Duration=Duration+@D
	WHERE CID IN(SELECT CID FROM INSERTED)
END

EXEC INS_Course 'VB.NET'

EXEC INS_Course 'C#.NET'


CREATE PROC DEL_Course @CID INT AS
	DELETE Courses
	WHERE cid=@CID

CREATE TRIGGER tg_DEL_Course ON Courses FOR DELETE AS
BEGIN
	DECLARE @CID INT
	SELECT @CID=CID
	FROM DELETED

	DELETE Lessons
	WHERE cid=@CID
END

EXEC DEL_Course 1


CREATE FUNCTION GetKey(@CID INT)RETURNS INT AS
BEGIN
	DECLARE @ID INT
	SELECT @ID=MAX(LID )
	FROM Lessons
	WHERE cid=@CID
RETURN @ID
END

SELECT DBO.GETKEY(3)